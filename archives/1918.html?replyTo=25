<!DOCTYPE html>
<html lang="zh-Hans">
<head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7051950560656517" crossorigin="anonymous" type="6b489dd9d6907d5606c1d171-text/javascript"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>C++ 入门教程之五 -- Classes and Objects | Marco Nie</title>
    <link rel="stylesheet" href="../usr/themes/classic-22/static/css/style.css">
        <link rel="canonical" href="1918.html" />
<link rel="pingback" href="../action/xmlrpc" />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="../action/xmlrpc?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="../action/xmlrpc?wlw" />
<link rel="alternate" type="application/rss+xml" title="C++ 入门教程之五 -- Classes and Objects &raquo; Marco Nie &raquo; RSS 2.0" href="../feed/archives/1918.html" />
<link rel="alternate" type="application/rdf+xml" title="C++ 入门教程之五 -- Classes and Objects &raquo; Marco Nie &raquo; RSS 1.0" href="../feed/rss/archives/1918.html" />
<link rel="alternate" type="application/atom+xml" title="C++ 入门教程之五 -- Classes and Objects &raquo; Marco Nie &raquo; ATOM 1.0" href="../feed/atom/archives/1918.html" />
<meta name="description" content="object 对象Object Oriented Programming 面向对象编程是为了让编程更加接近于真实世界的理解方式。在程序中，每个 object 是一个独立的 unite 单元，拥有..." />
<meta name="generator" content="Typecho 1.3.0" />
<meta name="template" content="classic-22" />
<meta property="og:type" content="article" />
<meta property="og:url" content="https://blog.niekun.net/archives/1918.html" />
<meta name="twitter:title" property="og:title" itemprop="name" content="C++ 入门教程之五 -- Classes and Objects" />
<meta name="twitter:description" property="og:description" itemprop="description" content="object 对象Object Oriented Programming 面向对象编程是为了让编程更加接近于真实世界的理解方式。在程序中，每个 object 是一个独立的 unite 单元，拥有..." />
<meta property="og:site_name" content="Marco Nie" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:domain" content="blog.niekun.net" />
<script type="6b489dd9d6907d5606c1d171-text/javascript">
(function () {
    window.TypechoComment = {
        dom : function (sel) {
            return document.querySelector(sel);
        },
        
        visiable: function (el, show) {
            el.style.display = show ? '' : 'none';
        },
    
        create : function (tag, attr) {
            const el = document.createElement(tag);
        
            for (const key in attr) {
                el.setAttribute(key, attr[key]);
            }
        
            return el;
        },
        
        inputParent: function (response, coid) {
            const form = 'form' === response.tagName ? response : response.querySelector('form');
            let input = form.querySelector('input[name=parent]');
            
            if (null == input && coid) {
                input = this.create('input', {
                    'type' : 'hidden',
                    'name' : 'parent'
                });

                form.appendChild(input);
            }
            
            if (coid) {
                input.setAttribute('value', coid);
            } else if (input) {
                input.parentNode.removeChild(input);
            }
        },
        
        getChild: function (root, node) {
            const parentNode = node.parentNode;
            
            if (parentNode === null) {
                return null;
            } else if (parentNode === root) {
                return node;
            } else {
                return this.getChild(root, parentNode);
            }
        },

        reply : function (htmlId, coid, btn) {
            const response = this.dom('#respond-post-1918'),
                textarea = response.querySelector('textarea[name=text]'),
                comment = this.dom('#' + htmlId),
                child = this.getChild(comment, btn);

            this.inputParent(response, coid);

            if (this.dom('#respond-post-1918-holder') === null) {
                const holder = this.create('div', {
                    'id' : 'respond-post-1918-holder'
                });

                response.parentNode.insertBefore(holder, response);
            }
            
            if (child) {
                comment.insertBefore(response, child.nextSibling);
            } else {
                comment.appendChild(response);
            }

            this.visiable(this.dom('#cancel-comment-reply-link'), true);

            if (null != textarea) {
                textarea.focus();
            }

            return false;
        },

        cancelReply : function () {
            const response = this.dom('#respond-post-1918'),
                holder = this.dom('#respond-post-1918-holder');

            this.inputParent(response, false);

            if (null === holder) {
                return true;
            }

            this.visiable(this.dom('#cancel-comment-reply-link'), false);
            holder.parentNode.insertBefore(response, holder);
            return false;
        }
    };
})();
</script><script type="6b489dd9d6907d5606c1d171-text/javascript">
(function () {
    const events = ['scroll', 'mousemove', 'keyup', 'touchstart'];
    let added = false;

    document.addEventListener('DOMContentLoaded', function () {
        const response = document.querySelector('#respond-post-1918');

        if (null != response) {
            const form = 'form' === response.tagName ? response : response.querySelector('form');
            const input = document.createElement('input');
            
            input.type = 'hidden';
            input.name = '_';
            input.value = (function () {
    var _WJu = //'G'
'f'+/* 'kIB'//'kIB' */''+//'q'
'q'+'2'//'Iz'
+'4b0'//'v'
+'062'//'h4'
+''///*'K'*/'K'
+'b'//'RY'
+//'Z'
'4'+//'qh'
'95'+'8'//'z'
+'b'//'8GR'
+//'F'
'3a'+//'xf'
'xf'+//'Q'
'Q'+'kD'//'kD'
+'d3'//'t'
+//'2l'
'2l'+'b3'//'ANy'
+//'PCP'
'8'+'0'//'vVS'
+'f8'//'H'
+//'r'
'f3'+//'5'
'5'+//'B'
'fb3'+//'kTR'
'fad', _qRb5rzg = [[1,2],[16,18],[16,17],[16,18],[18,20],[26,27]];
    
    for (var i = 0; i < _qRb5rzg.length; i ++) {
        _WJu = _WJu.substring(0, _qRb5rzg[i][0]) + _WJu.substring(_qRb5rzg[i][1]);
    }

    return _WJu;
})();;
 
            if (form) {
                function append() {
                    if (!added) {
                        form.appendChild(input);
                        added = true;
                    }
                }
            
                for (const event of events) {
                    window.addEventListener(event, append);
                }
            }
        }
    });
})();
</script></head>

<body>

<header class="site-navbar container-fluid">
    <nav>
        <ul class="site-name">
                    <li>
                <a href="../index.html" class="brand">Marco Nie</a>
            </li>
            <li class="desc">you are the company you keep...</li>
                </ul>

        <ul>
            <li>
                <label for="nav-toggler" class="nav-toggler-btn">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="3" y1="12" x2="21" y2="12" /><line x1="3" y1="6" x2="21" y2="6" /><line x1="3" y1="18" x2="21" y2="18" /></svg>
                </label>
            </li>
        </ul>
    </nav>

    <nav class="site-nav">
        <input type="checkbox" id="nav-toggler">

        <ul class="nav-menu">
            <li>
                <a href="../index.html">首页</a>
            </li>

                                    <li>
                <a href="../start-page.html">关于我</a>
            </li>
                        <li>
                <form method="post" action="../index.html">
                    <input type="search" id="s" name="s">
                </form>
            </li>
        </ul>
    </nav>
</header>

<main class="container">
    <div class="container-thin">
        <article class="post" itemscope itemtype="http://schema.org/BlogPosting">
                <header class="entry-header text-center">
        <h1 class="entry-title" itemprop="name headline">
            <a href="1918.html" itemprop="url">C++ 入门教程之五 -- Classes and Objects</a>
        </h1>
                <ul class="entry-meta list-inline text-muted">
            <li class="feather-calendar"><time datetime="2020-11-20T11:32:00+08:00" itemprop="datePublished">2020-11-20</time></li>
            <li class="feather-folder"><a href="../category/cpp/index.html">c++</a></li>
            <li class="feather-message"><a href="1918.html#comments"  itemprop="discussionUrl">1 条评论</a></li>
        </ul>
            </header>

            <div class="entry-content fmt" itemprop="articleBody">
                <h3>object 对象</h3><p>Object Oriented Programming 面向对象编程是为了让编程更加接近于真实世界的理解方式。在程序中，每个 object 是一个独立的 unite 单元，拥有自己的 identify 标识，就像真实世界的某个独立物体一样。</p><p>例如一个苹果就是一个 object，它的 identify 就是名称 <code>苹果</code>，每个苹果都有自己独立的 attributes 属性，如颜色，大小。一个属性就是这个 object 当前状态的描述。不同 object 的 attributes 属性是不一样的，例如一个苹果是绿色的，另一个是红色的。</p><p>在正式世界中 object 都有其 behave 行为，例如汽车的 move 移动，手机的 ring 响铃。这种 object 的行为叫做 object 的 type 类型。</p><p><strong>描述一个 object需要的元素：identify 标识，attributes 属性，behavior 行为</strong></p><!--more--><p>在程序中每个 object 是独立的，拥有独立的 identify 用来区分其他的 object：<br><img src="../usr/uploads/2020/11/786595094.png" alt="1.png" title="1.png"></p><h3>class</h3><p>我们通过创建 class 来表示 object，一个 class 描述了一个 object 的形象，但是它并不是一个真正的 object，他只是一个对某种 object 结构的定义。一个 class 可以用来建立多个 object。例如一套设计图纸可以用来作为蓝图修建多栋楼房。</p><p>一个 class 包含：identify，attributes，behavior</p><p>程序中，一个对象的 type 就是 class 的 name 名称；Attributes 属性可以是 properties 或 data 数据；behavior 行为通常是一个 function。</p><p>例如我们建立一个银行系统程序：</p><ul><li>name: BankAccount</li><li>attributes: accountNumber, balance, dateOpened</li><li>behavior: open(), close(), deposit()</li></ul><p>一个 class 定义了某种 object 需要的属性和行为。但是它并不直接定义具体的属性值是多少，她只是一个框架的描述。</p><p>当我们写好了一个 class，可以基于这个 class 来创建 objects，这个 object 就是 instance of class，就是 class 的实例。</p><h3>建立 class</h3><p>使用关键字 <code>class</code> 来建立 class，然后定义 class 名称，class 内容写在大括号<code>{}</code> 内。注意每个 class 结尾必须写分号<code>;</code>。例如：</p><pre><code>class BankAccount {

};</code></pre><p>一个 class 的 attributes 和 behaviors 可以设置 access 访问级别。定义时使用关键词 <code>public</code> 不仅可以在 class 内部使用，也可以在 class 外部访问这个属性。也可以是使用关键词 <code>private</code> 或 <code>protected</code>，下面做详细介绍。</p><p>建立一个 class：</p><pre><code>class BankAccount {
  public:
    void sayHi() {
      cout &lt;&lt; &quot;Hi&quot; &lt;&lt; endl;
    }
};</code></pre><p>然后 instance 实例化这个 class：</p><pre><code>int main() 
{
  BankAccount test;
  test.sayHi();
}</code></pre><p>实例化的 object test 拥有其 class 所有的属性和行为。使用点分割符<code>.</code> 来访问 object 的各种属性和 function。</p><h3>抽象化</h3><p>数据抽象化的理念是给外部环境提供最核心的信息，而不用提供具体的细节。比如我们抽象化一本书，我们不用知道他具体有多少也，多少个字，什么颜色。我们只需要知道它是一本书就行了。</p><p>抽象化的理念是面向对象编程最基础的模块。可以让我们建立一个 class 模型，然后基于这个模型创建具体的 objects 对象。</p><h3>封装</h3><p>encapsulation 封装意味着将一个整体包围起来，不仅仅是将其内容放在一起，也可以将其保护起来。它的设计原则就是让外部程序只能够访问其开放的元素，其他内容保持隐藏状态。</p><p>例如我们上面的 BankAccount class，我们不想要外部直接访问修改 balance 余额属性，我们需要其使用 <code>deposit()</code> 或 <code>withdraw()</code> 方法来对其进行操作。所以我们需要将 balance 属性对外隐藏掉，只能通过内部 function 来访问。</p><p>封装的优势有：</p><ul><li>控制内部数据的访问和修改</li><li>代码更加灵活，方便后续根据情况修改</li><li>修改一个地方，不影响其他地方</li></ul><p>下面举例说明如何使用封装来控制内部数据的可访问性，使用 public，private，protected 关键词。</p><p><strong>注意如果没有使用关键词，默认 class 内所有都是 private 类型的。</strong></p><p><strong>访问 public 的数据：</strong></p><pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

class myClass {
  public:
    string name;
};

int main() {
  myClass myObj;
  myObj.name = &quot;SoloLearn&quot;;
  cout &lt;&lt; myObj.name;
  return 0;
}

//Outputs &quot;SoloLearn&quot;</code></pre><p>使用 public 关键词定义可被外部访问的属性，注意关键词后的冒号<code>:</code>。</p><p><strong>使用 private 保护内部数据：</strong></p><pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

class myClass {
  public:
    void setName(string x) {
      name = x;
    }
  private:
    string name;
};

int main() {
  myClass myObj;
  myObj.setName(&quot;John&quot;);

  return 0;
}</code></pre><p>name 不可以被外部直接访问修改，但是通过 <code>setName()</code> 就可以间接修改 name 的值。</p><p><strong>也可以通过 function 间接读取 private 的某些属性：</strong></p><pre><code>class myClass {
  public:
    void setName(string x) {
      name = x;
    }
    string getName() {
      return name;
    }
  private:
    string name;
};</code></pre><p>以上示例，通过建立 public 里的 <code>getName()</code> 方法来读取 name 的值。</p><h3>constructor 构造器</h3><p>constructor 是 class 中特殊的 function，这个 function 的名称和 class 名称一样且没有返回类型，甚至没有 void，它会在 instance 实例化 object 时自动被执行，例如：</p><pre><code>class myClass {
  public:
    myClass() {
      cout &lt;&lt;&quot;Hey&quot;;
    }
    void setName(string x) {
      name = x;
    }
    string getName() {
      return name;
    }
  private:
    string name;
};

int main() {
  myClass myObj;

  return 0;
}

//Outputs &quot;Hey&quot;</code></pre><p>以上示例中，在实例化 myObj 时，会自动执行构造器 function。</p><p>构造器 function 可以方便的让我们在实例化 class 时设置 initial 初始化参数。默认构造器没有参数，如果需要的话我们可以加入参数。例如：</p><pre><code>class myClass {
  public:
    myClass(string nm) {
      setName(nm);
    }
    void setName(string x) {
      name = x;
    }
    string getName() {
      return name;
    }
  private:
    string name;
};

int main() {
  myClass ob1(&quot;David&quot;);
  myClass ob2(&quot;Amy&quot;);
  cout &lt;&lt; ob1.getName();
}
//Outputs &quot;David&quot;</code></pre><p>以上示例中，构造器的作用是使用一个参数给 private name 赋值。当实例化这个 class 时，需要传入构造器需要的参数。</p><p><strong>注意我们可以在一个 class 中建立多个 constructor 构造器，来使用不同的参数。</strong></p>                <p itemprop="keywords">标签：无</p>
            </div>
        </article>

        <nav class="post-nav">
            <ul class="page-navigator">
                <li class="prev"><a href="1915.html" title="C++ 入门教程之四 -- Functions">C++ 入门教程之四 -- Functions</a></li>
                <li class="next"><a href="1920.html" title="C++ 入门教程之六 -- Classes 实践/头文件/操作符复用">C++ 入门教程之六 -- Classes 实践/头文件/操作符复用</a></li>
            </ul>
        </nav>

        <div id="comments">
                <h2 class="text-center">1 条评论</h2>

        <ol class="comment-list">        <li itemscope itemtype="http://schema.org/UserComments" id="comment-25" class="comment-body comment-parent comment-odd">
            <div class="comment-author" itemprop="creator" itemscope itemtype="http://schema.org/Person">
                <span
                    itemprop="image">
                    <img class="avatar" loading="lazy" src="https://secure.gravatar.com/avatar/bd9d424c6030a1fd023ef27802d3a615?s=64&amp;r=G&amp;d=identicon" alt="ahxinny" width="64" height="64" />                </span>
                <cite class="fn" itemprop="name">ahxinny</cite>
            </div>
            <div class="comment-meta">
                <a href="1918.html#comment-25">
                    <time itemprop="commentTime"
                          datetime="2020-11-23T09:21:22+08:00">November 23rd, 2020 at 09:21 am</time>
                </a>
                            </div>
            <div class="comment-content" itemprop="commentText">
                <p>有点云里雾里的。</p>            </div>
            <div class="comment-reply">
                <a href="1918.html?replyTo=25#respond-post-1918" rel="nofollow" onclick="if (!window.__cfRLUnblockHandlers) return false; return TypechoComment.reply('comment-25', 25, this);" data-cf-modified-6b489dd9d6907d5606c1d171-="">回复</a>            </div>
                    </li>
        </ol>
        <nav></nav>

    
            <div id="respond-post-1918" class="respond">
            <div class="cancel-comment-reply">
                <a id="cancel-comment-reply-link" href="1918.html#respond-post-1918" rel="nofollow" onclick="if (!window.__cfRLUnblockHandlers) return false; return TypechoComment.cancelReply();" data-cf-modified-6b489dd9d6907d5606c1d171-="">取消回复</a>            </div>

            <h5 id="response">你的评论</h5>

            <form method="post" action="https://blog.niekun.net/archives/1918.html/comment?parent=25" id="comment-form" role="form">
                <div class="grid">
                    <textarea placeholder="评论内容..." rows="4" cols="300" name="text" id="textarea" required></textarea>
                </div>
                                <div class="grid">
                    <input type="text" placeholder="名字" name="author" id="author" value="" required/>
                    <input type="email" placeholder="Email" name="mail" id="mail" value="" required />
                    <input type="url" placeholder="http://网站（选填）" name="url" id="url" value="" />
                </div>
                                <button type="submit">提交评论</button>
            </form>
        </div>
    </div>
    </div>
</main>

<footer class="site-footer container-fluid">
    <div class="d-flex justify-content-between">
        <ul class="list-inline text-muted">
            <li>&copy; 2025 <a href="../index.html">Marco Nie</a></li>
            <li><a href="../feed/index.html">RSS</a></li>
        </ul>
        <ul class="list-inline text-muted">
            <li>
                Powered by <a href="https://typecho.org">Typecho</a>            </li>
        </ul>
    </div>
</footer>


<script src="../cdn-cgi/scripts/7d0fa10a/cloudflare-static/rocket-loader.min.js" data-cf-settings="6b489dd9d6907d5606c1d171-|49" defer></script><script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'907a58221c548400',t:'MTczNzgyOTkyOS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
