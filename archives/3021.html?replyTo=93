<!DOCTYPE html>
<html lang="zh-Hans">
<head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7051950560656517" crossorigin="anonymous" type="f0ded68a37d477cac0c448e4-text/javascript"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>honkit 使用教程及部署github page | Marco Nie</title>
    <link rel="stylesheet" href="../usr/themes/classic-22/static/css/style.css">
        <link rel="canonical" href="3021.html" />
<link rel="pingback" href="../action/xmlrpc" />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="../action/xmlrpc?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="../action/xmlrpc?wlw" />
<link rel="alternate" type="application/rss+xml" title="honkit 使用教程及部署github page &raquo; Marco Nie &raquo; RSS 2.0" href="../feed/archives/3021.html" />
<link rel="alternate" type="application/rdf+xml" title="honkit 使用教程及部署github page &raquo; Marco Nie &raquo; RSS 1.0" href="../feed/rss/archives/3021.html" />
<link rel="alternate" type="application/atom+xml" title="honkit 使用教程及部署github page &raquo; Marco Nie &raquo; ATOM 1.0" href="../feed/atom/archives/3021.html" />
<meta name="description" content="1. 什么是 Honkit？Honkit 是一个现代化的静态书籍生成工具，它是基于旧版 GitBook 开发的，支持 Markdown 文件的编写和多种输出格式，如 HTML 和 PDF。" />
<meta name="generator" content="Typecho 1.3.0" />
<meta name="template" content="classic-22" />
<meta property="og:type" content="article" />
<meta property="og:url" content="https://blog.niekun.net/archives/3021.html" />
<meta name="twitter:title" property="og:title" itemprop="name" content="honkit 使用教程及部署github page" />
<meta name="twitter:description" property="og:description" itemprop="description" content="1. 什么是 Honkit？Honkit 是一个现代化的静态书籍生成工具，它是基于旧版 GitBook 开发的，支持 Markdown 文件的编写和多种输出格式，如 HTML 和 PDF。" />
<meta property="og:site_name" content="Marco Nie" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:domain" content="blog.niekun.net" />
<script type="f0ded68a37d477cac0c448e4-text/javascript">
(function () {
    window.TypechoComment = {
        dom : function (sel) {
            return document.querySelector(sel);
        },
        
        visiable: function (el, show) {
            el.style.display = show ? '' : 'none';
        },
    
        create : function (tag, attr) {
            const el = document.createElement(tag);
        
            for (const key in attr) {
                el.setAttribute(key, attr[key]);
            }
        
            return el;
        },
        
        inputParent: function (response, coid) {
            const form = 'form' === response.tagName ? response : response.querySelector('form');
            let input = form.querySelector('input[name=parent]');
            
            if (null == input && coid) {
                input = this.create('input', {
                    'type' : 'hidden',
                    'name' : 'parent'
                });

                form.appendChild(input);
            }
            
            if (coid) {
                input.setAttribute('value', coid);
            } else if (input) {
                input.parentNode.removeChild(input);
            }
        },
        
        getChild: function (root, node) {
            const parentNode = node.parentNode;
            
            if (parentNode === null) {
                return null;
            } else if (parentNode === root) {
                return node;
            } else {
                return this.getChild(root, parentNode);
            }
        },

        reply : function (htmlId, coid, btn) {
            const response = this.dom('#respond-post-3021'),
                textarea = response.querySelector('textarea[name=text]'),
                comment = this.dom('#' + htmlId),
                child = this.getChild(comment, btn);

            this.inputParent(response, coid);

            if (this.dom('#respond-post-3021-holder') === null) {
                const holder = this.create('div', {
                    'id' : 'respond-post-3021-holder'
                });

                response.parentNode.insertBefore(holder, response);
            }
            
            if (child) {
                comment.insertBefore(response, child.nextSibling);
            } else {
                comment.appendChild(response);
            }

            this.visiable(this.dom('#cancel-comment-reply-link'), true);

            if (null != textarea) {
                textarea.focus();
            }

            return false;
        },

        cancelReply : function () {
            const response = this.dom('#respond-post-3021'),
                holder = this.dom('#respond-post-3021-holder');

            this.inputParent(response, false);

            if (null === holder) {
                return true;
            }

            this.visiable(this.dom('#cancel-comment-reply-link'), false);
            holder.parentNode.insertBefore(response, holder);
            return false;
        }
    };
})();
</script><script type="f0ded68a37d477cac0c448e4-text/javascript">
(function () {
    const events = ['scroll', 'mousemove', 'keyup', 'touchstart'];
    let added = false;

    document.addEventListener('DOMContentLoaded', function () {
        const response = document.querySelector('#respond-post-3021');

        if (null != response) {
            const form = 'form' === response.tagName ? response : response.querySelector('form');
            const input = document.createElement('input');
            
            input.type = 'hidden';
            input.name = '_';
            input.value = (function () {
    var _SwNG = '639'//'0Ra'
+//'4Pj'
'fd'+//'0Hq'
'a'+//'laA'
'9da'+'5'//'T'
+//'ClL'
'fb'+'j5'//'j5'
+'87'//'1mk'
+'Tl'//'Tl'
+'b'//'A'
+//'5lE'
'81e'+//'1X'
'b'+/* 'rh'//'rh' */''+'f'//'M1q'
+'859'//'0'
+'ae'//'Om'
+'4'//'9'
+//'zgO'
'0c'+''///*'HX5'*/'HX5'
+''///*'sL'*/'sL'
+''///*'OU'*/'OU'
+'e'//'XHV'
+//'1c'
'8'+/* '25'//'25' */''+//'n'
'3'+'7'//'Y5'
, _QvX9W = [[12,14],[14,16]];
    
    for (var i = 0; i < _QvX9W.length; i ++) {
        _SwNG = _SwNG.substring(0, _QvX9W[i][0]) + _SwNG.substring(_QvX9W[i][1]);
    }

    return _SwNG;
})();;
 
            if (form) {
                function append() {
                    if (!added) {
                        form.appendChild(input);
                        added = true;
                    }
                }
            
                for (const event of events) {
                    window.addEventListener(event, append);
                }
            }
        }
    });
})();
</script></head>

<body>

<header class="site-navbar container-fluid">
    <nav>
        <ul class="site-name">
                    <li>
                <a href="../index.html" class="brand">Marco Nie</a>
            </li>
            <li class="desc">you are the company you keep...</li>
                </ul>

        <ul>
            <li>
                <label for="nav-toggler" class="nav-toggler-btn">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="3" y1="12" x2="21" y2="12" /><line x1="3" y1="6" x2="21" y2="6" /><line x1="3" y1="18" x2="21" y2="18" /></svg>
                </label>
            </li>
        </ul>
    </nav>

    <nav class="site-nav">
        <input type="checkbox" id="nav-toggler">

        <ul class="nav-menu">
            <li>
                <a href="../index.html">首页</a>
            </li>

                                    <li>
                <a href="../start-page.html">关于我</a>
            </li>
                        <li>
                <form method="post" action="../index.html">
                    <input type="search" id="s" name="s">
                </form>
            </li>
        </ul>
    </nav>
</header>

<main class="container">
    <div class="container-thin">
        <article class="post" itemscope itemtype="http://schema.org/BlogPosting">
                <header class="entry-header text-center">
        <h1 class="entry-title" itemprop="name headline">
            <a href="3021.html" itemprop="url">honkit 使用教程及部署github page</a>
        </h1>
                <ul class="entry-meta list-inline text-muted">
            <li class="feather-calendar"><time datetime="2025-01-17T17:14:00+08:00" itemprop="datePublished">2025-01-17</time></li>
            <li class="feather-folder"><a href="../category/web/index.html">web</a></li>
            <li class="feather-message"><a href="3021.html#comments"  itemprop="discussionUrl">3 条评论</a></li>
        </ul>
            </header>

            <div class="entry-content fmt" itemprop="articleBody">
                <h2>1. 什么是 Honkit？</h2><p><strong>Honkit</strong> 是一个现代化的静态书籍生成工具，它是基于旧版 GitBook 开发的，支持 Markdown 文件的编写和多种输出格式，如 HTML 和 PDF。</p><!--more--><h2>2. 初始化 Honkit 项目</h2><h3>2.1 创建 Honkit 项目</h3><ol><li><p><strong>创建项目目录</strong>：</p><pre><code class="lang-bash">mkdir my-honkit-project
cd my-honkit-project</code></pre></li><li><p><strong>初始化 Honkit 项目</strong>：</p><pre><code class="lang-bash">npx honkit init</code></pre><p>这会生成以下两个文件：</p><ul><li><code>README.md</code>：书籍的主页面。</li><li><code>SUMMARY.md</code>：目录结构的定义。</li></ul></li><li><p><strong>安装 Honkit</strong>：</p><pre><code class="lang-bash">npm install honkit --save-dev</code></pre></li></ol><h2>3. 本地构建书籍</h2><h3>3.1 运行开发服务器</h3><p>在项目目录中运行以下命令启动本地预览：</p><pre><code class="lang-bash">npx honkit serve</code></pre><p>默认情况下，书籍会在 <a href="http://localhost:4000">http://localhost:4000</a> 上运行。</p><h3>3.2 生成静态文件</h3><p>当书籍准备好后，运行以下命令生成静态 HTML 文件：</p><pre><code class="lang-bash">npx honkit build</code></pre><p>生成的文件会存储在 <code>_book</code> 目录中。</p><hr><h2>4. 生成 PDF 文件</h2><p>Honkit 支持将书籍生成 PDF 文件，但需要预先安装 <strong>Calibre</strong> 电子书管理软件。</p><h3>4.1 安装 Calibre</h3><ol><li><p><strong>下载 Calibre</strong>：</p><ul><li>访问 Calibre 官网：<a href="https://calibre-ebook.com/download">https://calibre-ebook.com/download</a>。</li><li>下载并安装适合您系统的版本。</li></ul></li><li><p><strong>确保 Calibre 路径正确</strong>：</p><ul><li><p><strong>检查环境变量</strong>：</p><ul><li>通常，Calibre 安装会自动将路径添加到系统的环境变量 <code>PATH</code> 中。</li><li>如果未自动添加，手动将 Calibre 的安装目录路径添加到 <code>PATH</code> 环境变量中。</li></ul></li><li><p>例如，Windows 系统下，路径可能为：</p><pre><code>C:\Program Files\Calibre2</code></pre></li><li><p>Linux 和 macOS 用户可通过以下命令验证：</p><pre><code class="lang-bash">which ebook-convert</code></pre><p>如果返回路径为空，说明需要手动添加。</p></li></ul></li><li><strong>重新打开终端</strong>：<br>添加路径后，确保关闭并重新打开终端。</li></ol><h3>4.2 生成 PDF</h3><p>运行以下命令生成 PDF 文件：</p><pre><code class="lang-bash">npx honkit pdf . output.pdf</code></pre><ul><li><code>.</code> 表示当前目录。</li><li><code>output.pdf</code> 是生成的 PDF 文件名。</li></ul><h2>5. 部署到 GitHub Pages</h2><h3>5.1 创建 GitHub 仓库</h3><ol><li>前往 <a href="https://github.com">GitHub</a> 创建一个新仓库（例如 <code>my-honkit-book</code>）。</li><li><p>将本地项目与远程仓库关联：</p><pre><code class="lang-bash">git init
git remote add origin https://github.com/&lt;username&gt;/my-honkit-book.git
git add .
git commit -m &quot;Initial commit&quot;
git branch -M main
git push -u origin main</code></pre></li></ol><h3>5.2 配置 GitHub Actions 自动部署</h3><ol><li><p><strong>创建 GitHub Actions 配置文件</strong>：<br>在项目的根目录下创建 <code>.github/workflows/deploy.yml</code> 文件，内容如下：</p><pre><code class="lang-yaml">name: Deploy Honkit to GitHub Pages

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Dependencies
      run: npm install

    - name: Build Honkit
      run: npx honkit build

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./_book</code></pre></li><li><p><strong>提交配置文件</strong>：<br>提交并推送配置文件到 GitHub：</p><pre><code class="lang-bash">git add .github/workflows/deploy.yml
git commit -m &quot;Add GitHub Actions for deployment&quot;
git push origin main</code></pre></li><li><p><strong>启用 GitHub Pages</strong>：</p><ul><li>进入仓库的 <strong>Settings</strong> &gt; <strong>Pages</strong>。</li><li>在 <strong>Source</strong> 下选择 <code>gh-pages</code> 分支，点击保存。</li></ul></li></ol><h2>6. 绑定自定义域名</h2><h3>6.1 配置 GitHub Pages</h3><ol><li>进入仓库的 <strong>Settings</strong> &gt; <strong>Pages</strong>。</li><li>在 <strong>Custom domain</strong> 中输入您的自定义域名（例如 <code>www.example.com</code>）。</li><li>点击 <strong>Save</strong>。GitHub 会自动生成一个 <code>CNAME</code> 文件。</li></ol><h3>6.2 配置 DNS 记录</h3><p>登录您的域名注册商控制台，添加以下 DNS 记录：</p><ul><li><p><strong>绑定子域名</strong>（例如 <code>www.example.com</code>）：<br>添加 <strong>CNAME 记录</strong>：</p><pre><code>www  CNAME  &lt;username&gt;.github.io</code></pre></li></ul><blockquote>注意：将 <code>&lt;username&gt;</code> 替换为您的 GitHub 用户名。</blockquote><h3>6.3 启用 HTTPS</h3><ol><li>返回 GitHub 仓库的 <strong>Settings</strong> &gt; <strong>Pages</strong>。</li><li>勾选 <strong>Enforce HTTPS</strong>，以启用 HTTPS 访问。</li></ol><h2>自定义域名每次推送后消失的解决方法</h2><p>当每次推送代码后，自定义域名设置消失，通常是由于 <code>CNAME</code> 文件被覆盖或删除。GitHub Pages 需要根目录的 <code>CNAME</code> 文件来保存自定义域名信息。如果该文件丢失或被覆盖，GitHub 就无法识别您的自定义域名。</p><hr><h2>解决方法</h2><p>手动将 <code>CNAME</code> 文件添加到源码目录</p><ol><li><p><strong>创建 <code>CNAME</code> 文件</strong>：<br>在项目根目录（如 <code>main</code> 分支）下创建一个 <code>CNAME</code> 文件，并在文件中输入您的自定义域名，例如：</p><pre><code>www.example.com</code></pre></li><li><p><strong>提交更改</strong>：<br>提交并推送 <code>CNAME</code> 文件到远程仓库：</p><pre><code class="lang-bash">git add CNAME
git commit -m &quot;Add CNAME file&quot;
git push origin main</code></pre></li><li><strong>验证</strong>：<br>每次部署后，<code>CNAME</code> 文件会自动被包含在 <code>gh-pages</code> 分支中，不会被覆盖。</li></ol><h2>验证步骤</h2><ol><li><p><strong>检查 <code>CNAME</code> 文件</strong>：</p><ul><li>进入 GitHub 仓库的 <code>gh-pages</code> 分支，确认根目录下有 <code>CNAME</code> 文件。</li><li><p>文件内容应为您的自定义域名，例如：</p><pre><code>www.example.com</code></pre></li></ul></li><li><p><strong>检查 GitHub Pages 设置</strong>：</p><ul><li>转到 <strong>Settings &gt; Pages</strong>。</li><li>确认自定义域名已正确显示，并启用 <strong>HTTPS</strong>。</li></ul></li><li><strong>测试访问</strong>：<br>使用您的自定义域名访问页面，确认是否能够正确加载。</li></ol><h2>7. 常见问题及解决方法</h2><h3>问题 1：<code>npx honkit pdf</code> 报错 <code>Command failed: ebook-convert not found</code></h3><p><strong>原因</strong>：  <br>Calibre 未正确安装，或 <code>ebook-convert</code> 工具未添加到系统的 <code>PATH</code> 环境变量中。</p><p><strong>解决方法</strong>：</p><ol><li><p>确保 Calibre 已安装，并重新确认安装路径：</p><ul><li>Windows 默认路径：<code>C:\Program Files\Calibre2</code>。</li><li>macOS/Linux 使用 <code>which ebook-convert</code> 检查路径。</li></ul></li><li><p>手动将 Calibre 的安装路径添加到系统环境变量中：</p><ul><li><p><strong>Windows</strong>：</p><ul><li>打开“环境变量”设置，找到 <code>PATH</code>。</li><li>添加 <code>C:\Program Files\Calibre2</code>。</li></ul></li><li><p><strong>Linux/macOS</strong>：</p><ul><li><p>编辑 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 文件，添加以下内容：</p><pre><code class="lang-bash">export PATH=&quot;/path/to/calibre:$PATH&quot;</code></pre><p>替换 <code>/path/to/calibre</code> 为 Calibre 的实际路径。</p></li><li>保存后运行 <code>source ~/.bashrc</code> 或 <code>source ~/.zshrc</code> 使更改生效。</li></ul></li></ul></li><li>重新运行 <code>npx honkit pdf</code>。</li></ol><h3>问题 2：GitHub Actions 部署失败，提示 <code>Permission denied</code></h3><p><strong>原因</strong>：  <br>GitHub Actions 无法向 <code>gh-pages</code> 分支推送更改，通常是因为缺少权限。</p><p><strong>解决方法</strong>：</p><ol><li><p>确保 GitHub 仓库的 <strong>Settings</strong> &gt; <strong>Actions</strong> &gt; <strong>General</strong> 中已启用 <strong>Read and write permissions</strong>：</p><ul><li>打开 <strong>Workflow permissions</strong>，选择 <strong>Read and write permissions</strong>。</li><li>勾选 <strong>Allow GitHub Actions to create and approve pull requests</strong>。</li></ul></li><li><p>确认 GitHub Actions 配置文件中使用的是 <code>github_token</code>：</p><pre><code class="lang-yaml">with:
  github_token: ${{ secrets.GITHUB_TOKEN }}</code></pre></li></ol><h3>问题 3：GitHub Pages 部署成功，但自定义域名未生效</h3><p><strong>原因</strong>：  <br>DNS 记录配置错误或未生效。</p><p><strong>解决方法</strong>：</p><ol><li><p>登录域名管理平台，检查 DNS 配置：</p><ul><li>确认 A 记录或 CNAME 记录配置正确。</li><li>等待 DNS 记录生效（可能需要 5-48 小时）。</li></ul></li><li>检查仓库根目录下是否有 <code>CNAME</code> 文件，内容是否正确（应与自定义域名一致）。</li><li><p>验证 DNS 配置是否正确：</p><ul><li>使用 <a href="https://dnschecker.org">DNS Checker</a> 验证域名解析。</li></ul></li><li><p>启用 HTTPS：</p><ul><li>进入 <strong>Settings</strong> &gt; <strong>Pages</strong>，勾选 <strong>Enforce HTTPS</strong>。</li></ul></li></ol><h3>问题 4：生成的书籍内容显示错乱或样式缺失</h3><p><strong>原因</strong>：</p><ul><li>Markdown 文件中格式不正确。</li><li><code>SUMMARY.md</code> 的目录结构未正确链接。</li></ul><p><strong>解决方法</strong>：</p><ol><li>确认 Markdown 文件的格式是否符合规范。</li><li><p>检查 <code>SUMMARY.md</code> 中的链接是否与文件路径一致：</p><pre><code class="lang-markdown">* [章节标题](path/to/file.md)</code></pre></li><li><p>清理并重新构建书籍：</p><pre><code class="lang-bash">npx honkit build</code></pre></li></ol><h3>问题 5：自定义 PDF 样式未生效</h3><p><strong>原因</strong>：  <br>未指定自定义样式文件或样式文件路径错误。</p><p><strong>解决方法</strong>：</p><ol><li>创建一个 CSS 样式文件（如 <code>custom.css</code>），自定义 PDF 的排版样式。</li><li><p>使用以下命令生成 PDF 并指定样式文件：</p><pre><code class="lang-bash">npx honkit pdf --css custom.css . output.pdf</code></pre><h2>8. 支持与反馈</h2></li></ol><p>如果您遇到未列出的问题或有其他疑问，请参考以下支持途径：</p><ul><li><strong>Honkit 官方文档</strong>：<a href="https://honkit.netlify.app">https://honkit.netlify.app</a></li><li><strong>GitHub 仓库</strong>：<a href="https://github.com/honkit/honkit">https://github.com/honkit/honkit</a></li><li><strong>社区支持</strong>：搜索相关问题或发帖提问。</li></ul><p>完成这些步骤后，您可以成功使用 Honkit 创建、部署和管理文档，解决常见问题，并生成符合您需求的 HTML 和 PDF 文档！</p>                <p itemprop="keywords">标签：无</p>
            </div>
        </article>

        <nav class="post-nav">
            <ul class="page-navigator">
                <li class="prev"><a href="docker-compose.html" title="docker compose 配置自动更新">docker compose 配置自动更新</a></li>
                <li class="next">没有了</li>
            </ul>
        </nav>

        <div id="comments">
                <h2 class="text-center">3 条评论</h2>

        <ol class="comment-list">        <li itemscope itemtype="http://schema.org/UserComments" id="comment-93" class="comment-body comment-parent comment-odd">
            <div class="comment-author" itemprop="creator" itemscope itemtype="http://schema.org/Person">
                <span
                    itemprop="image">
                    <img class="avatar" loading="lazy" src="https://secure.gravatar.com/avatar/7ff2da83fa185b16dc3c9053fc6c10d5?s=64&amp;r=G&amp;d=identicon" alt="tfltaytule" width="64" height="64" />                </span>
                <cite class="fn" itemprop="name"><a href="http://zhongguoxiangtu.net" rel="external nofollow">tfltaytule</a></cite>
            </div>
            <div class="comment-meta">
                <a href="3021.html#comment-93">
                    <time itemprop="commentTime"
                          datetime="2025-03-01T10:37:00+08:00">March 1st, 2025 at 10:37 am</time>
                </a>
                            </div>
            <div class="comment-content" itemprop="commentText">
                <p>文化差异分析可再深化以避免误读。</p>            </div>
            <div class="comment-reply">
                <a href="3021.html?replyTo=93#respond-post-3021" rel="nofollow" onclick="if (!window.__cfRLUnblockHandlers) return false; return TypechoComment.reply('comment-93', 93, this);" data-cf-modified-f0ded68a37d477cac0c448e4-="">回复</a>            </div>
                    </li>
                <li itemscope itemtype="http://schema.org/UserComments" id="comment-99" class="comment-body comment-parent comment-even">
            <div class="comment-author" itemprop="creator" itemscope itemtype="http://schema.org/Person">
                <span
                    itemprop="image">
                    <img class="avatar" loading="lazy" src="https://secure.gravatar.com/avatar/d5ffd3bc5d5d070cf159ad9c5b758aff?s=64&amp;r=G&amp;d=identicon" alt="dfhzroaeqd" width="64" height="64" />                </span>
                <cite class="fn" itemprop="name"><a href="https://henan.vso.com.cn/" rel="external nofollow">dfhzroaeqd</a></cite>
            </div>
            <div class="comment-meta">
                <a href="3021.html#comment-99">
                    <time itemprop="commentTime"
                          datetime="2025-03-02T17:44:17+08:00">March 2nd, 2025 at 05:44 pm</time>
                </a>
                            </div>
            <div class="comment-content" itemprop="commentText">
                <p>作者对主题的挖掘深入骨髓，展现了非凡的洞察力和理解力。</p>            </div>
            <div class="comment-reply">
                <a href="3021.html?replyTo=99#respond-post-3021" rel="nofollow" onclick="if (!window.__cfRLUnblockHandlers) return false; return TypechoComment.reply('comment-99', 99, this);" data-cf-modified-f0ded68a37d477cac0c448e4-="">回复</a>            </div>
                    </li>
                <li itemscope itemtype="http://schema.org/UserComments" id="comment-100" class="comment-body comment-parent comment-odd">
            <div class="comment-author" itemprop="creator" itemscope itemtype="http://schema.org/Person">
                <span
                    itemprop="image">
                    <img class="avatar" loading="lazy" src="https://secure.gravatar.com/avatar/4855ea49bfde6d654364e6dc995f88bd?s=64&amp;r=G&amp;d=identicon" alt="xaxlpqpqkn" width="64" height="64" />                </span>
                <cite class="fn" itemprop="name"><a href="https://www.vso.com.cn/zhuanti/cwt/" rel="external nofollow">xaxlpqpqkn</a></cite>
            </div>
            <div class="comment-meta">
                <a href="3021.html#comment-100">
                    <time itemprop="commentTime"
                          datetime="2025-03-04T16:14:05+08:00">March 4th, 2025 at 04:14 pm</time>
                </a>
                            </div>
            <div class="comment-content" itemprop="commentText">
                <p>这篇文章如同一首动人的乐章，触动了读者内心深处的柔软。</p>            </div>
            <div class="comment-reply">
                <a href="3021.html?replyTo=100#respond-post-3021" rel="nofollow" onclick="if (!window.__cfRLUnblockHandlers) return false; return TypechoComment.reply('comment-100', 100, this);" data-cf-modified-f0ded68a37d477cac0c448e4-="">回复</a>            </div>
                    </li>
        </ol>
        <nav></nav>

    
            <div id="respond-post-3021" class="respond">
            <div class="cancel-comment-reply">
                <a id="cancel-comment-reply-link" href="3021.html#respond-post-3021" rel="nofollow" onclick="if (!window.__cfRLUnblockHandlers) return false; return TypechoComment.cancelReply();" data-cf-modified-f0ded68a37d477cac0c448e4-="">取消回复</a>            </div>

            <h5 id="response">你的评论</h5>

            <form method="post" action="https://blog.niekun.net/archives/3021.html/comment?parent=93" id="comment-form" role="form">
                <div class="grid">
                    <textarea placeholder="评论内容..." rows="4" cols="300" name="text" id="textarea" required></textarea>
                </div>
                                <div class="grid">
                    <input type="text" placeholder="名字" name="author" id="author" value="" required/>
                    <input type="email" placeholder="Email" name="mail" id="mail" value="" required />
                    <input type="url" placeholder="http://网站（选填）" name="url" id="url" value="" />
                </div>
                                <button type="submit">提交评论</button>
            </form>
        </div>
    </div>
    </div>
</main>

<footer class="site-footer container-fluid">
    <div class="d-flex justify-content-between">
        <ul class="list-inline text-muted">
            <li>&copy; 2025 <a href="../index.html">Marco Nie</a></li>
            <li><a href="../feed/index.html">RSS</a></li>
        </ul>
        <ul class="list-inline text-muted">
            <li>
                Powered by <a href="https://typecho.org">Typecho</a>            </li>
        </ul>
    </div>
</footer>


<script src="../cdn-cgi/scripts/7d0fa10a/cloudflare-static/rocket-loader.min.js" data-cf-settings="f0ded68a37d477cac0c448e4-|49" defer></script></body>
</html>
